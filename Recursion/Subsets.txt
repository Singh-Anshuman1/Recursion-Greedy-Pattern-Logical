//
Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]

Hint* the idea is either to include the element or exclude the element


class Solution {
public:
void subsets(vector<int>& nums,int index,vector<vector<int>>&an,vector<int>&ou)
{
if(index>=nums.size())
{
    an.push_back(ou);
    return;
}
//exclude
subsets(nums,index+1,an,ou);
//include
int ele=nums[index];
ou.push_back(ele);
subsets(nums,index+1,an,ou);
ou.pop_back();
}
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>>ans;
        vector<int>output;
        subsets(nums,0,ans,output);
        return ans;
    }
};