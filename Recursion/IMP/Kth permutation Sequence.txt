//The set [1, 2, 3, ..., n] contains a total of n! unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for n = 3:

"123"
"132"
"213"
"231"
"312"
"321"
Given n and k, return the kth permutation sequence.

 

Example 1:

Input: n = 3, k = 3
Output: "213"

Hint= You can generate all permuataions and store in a vector using recursion and then sort the vector and return k-1th index (Brute Force)


Optimize soln pseudo code is in notes copy


class Solution {
public:
    string getPermutation(int n, int k) {
        vector<int>num; //for storing the number 
        int fact=1;
        for(int i=1;i<n;i++)
        {
            num.push_back(i);
            fact=fact*i;
        }
        num.push_back(n);
        k=k-1;
        string ans="";
        while(true)
        {
            ans=ans+to_string(num[k/fact]);
            num.erase(num.begin()+k/fact);
            if(num.size()==0)
            break;
            k=k%fact;
            fact=fact/num.size();
            
            
        }
        return ans;
    }
};