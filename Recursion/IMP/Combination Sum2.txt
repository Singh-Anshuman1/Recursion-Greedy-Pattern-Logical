//
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]



class Solution {
public:
void combinations(vector<int>& cand,int index, int target,vector<vector<int>>&ans,vector<int>&vec1)
{
    //base case
        if(target==0)
        {
    ans.push_back(vec1);
    return;
    }
    for(int i=index;i<cand.size();i++)
    {
        if(i>index && cand[i]==cand[i-1]) 
        continue;
        if(cand[i]>target)
        break;
        vec1.push_back(cand[i]);
        combinations(cand,i+1,target-cand[i],ans,vec1);
        vec1.pop_back();
    }
}
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>>answers;
    vector<int>vec;
    combinations(candidates,0,target,answers,vec);
    return answers;
        
    }
};