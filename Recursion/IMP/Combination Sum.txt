Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the 
frequency
 of at least one of the chosen numbers is different.

The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

 

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.
Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]
Example 3:

Input: candidates = [2], target = 1
Output: []




Hint*= It is based on the concept of picking and not picking ,starting from 0th index if u decide to pick then u reduce the target by the picked  amount and again start from 0 ,if u dont decide to pick then you increment the index by 1 , folllowing a recursive approach



class Solution {
public:
void combinations(vector<int>& cand,int index, int target,vector<vector<int>>&ans,vector<int>&vec1)
{
    //base case
    if(index==cand.size())// valid combination
    {
        if(target==0)
    ans.push_back(vec1);
    return;
    }
    
    if(cand[index]<=target)
    {
        vec1.push_back(cand[index]);
        combinations(cand,index,target-cand[index],ans,vec1);
        vec1.pop_back();// while backtracking pop the elements which do not satisfy the condition
    }
    combinations(cand,index+1,target,ans,vec1);

}
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
    vector<vector<int>>answers;
    vector<int>vec;
    combinations(candidates,0,target,answers,vec);
    return answers;
    }
};


