class Solution{
    public:
    bool is_possible(vector<vector<int>> &m,vector<vector<int>>&visited,int x,int y,int n)
    {
        if(x>=0&&x<n&&y>=0&&y<n)
        {
            if(m[x][y]==1&&visited[x][y]==0)
            return true;
        }
        return false;
    }
    void rat_path(vector<string>&ans,vector<vector<int>> &m,int n,string path,vector<vector<int>>&visited,int x ,int y)
    {
        if(x==n-1&&y==n-1)
        {
            ans.push_back(path);
            return;
        }
        visited[x][y]=1;
        int newx;
        int newy;
        //for checking going up possible
         newx=x-1;
         newy=y;
         if(is_possible(m,visited,newx,newy,n))
         {
             path=path+"U";
             rat_path(ans,m,n,path,visited,newx,newy);
             path.pop_back(); //for backtracking
         }
        //for checking going down possible
        newx=x+1;
        newy=y;
        if(is_possible(m,visited,newx,newy,n))
         {
             path=path+"D";
             rat_path(ans,m,n,path,visited,newx,newy);
             path.pop_back(); //for backtracking
         }
        //for checking going left possible
        newx=x;
        newy=y-1;
        if(is_possible(m,visited,newx,newy,n))
         {
             path=path+"L";
             rat_path(ans,m,n,path,visited,newx,newy);
             path.pop_back(); //for backtracking
         }
        //for checking going right possible
        newx=x;
        newy=y+1;
        if(is_possible(m,visited,newx,newy,n))
         {
             path=path+"R";
             rat_path(ans,m,n,path,visited,newx,newy);
             path.pop_back(); //for backtracking
         }
         visited[x][y]=0;// while backtracking
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string>ans;
        if(m[0][0]==0)
        return ans;
       vector<vector<int>> visited(n, vector<int>(n, 0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            visited[i][j]=0;
        }
        string path="";
        rat_path(ans,m,n,path,visited,0,0);
        sort(ans.begin(),ans.end());
        return ans;
    }
};
