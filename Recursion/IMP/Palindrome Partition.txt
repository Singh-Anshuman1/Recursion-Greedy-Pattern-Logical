Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
. Return all possible palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
Example 2:

Input: s = "a"
Output: [["a"]]


class Solution {
public:
bool is_palindrome(string str,int s,int e)
{
    while(s<=e)
    {
        if(str[s++]!=str[e--])
        return false;
    }
    return true;
}
void partition(string s,int index,vector<vector<string>>&ans,vector<string>&path)
{
    if(index==s.size())       //base case
    {
        ans.push_back(path);
        return;
    }
    for(int i=index;i<s.size();i++)
    {
        if(is_palindrome(s,index,i))
        {
            path.push_back(s.substr(index,i-index+1));
            partition(s,i+1,ans,path);
            path.pop_back();
        }

    }
}
    vector<vector<string>> partition(string s) {
        vector<vector<string>>ans;
        vector<string>path;
        partition(s,0,ans,path);
        return ans;
        
    }
};