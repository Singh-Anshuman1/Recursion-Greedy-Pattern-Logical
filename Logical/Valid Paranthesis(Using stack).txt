Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false


*Hint- Case 1)for every opening bracket push into stack for a closing bracket pop the top element and compare it with closing one
Case 2)If after iterating through out the string , stack not empty then not a valid paranthesis
Case 3) If stack empty and encountering a closing bracket


class Solution {
public:
    bool isValid(string s) {
       stack<char>st;
       for(int i=0;i<s.length();i++)
       {
           char ch=s[i];
           if(ch=='('||ch=='{'||ch=='[')
           st.push(ch);
           else if(st.empty())
           {
               return false;
           }
           else
           {
               char ch1=st.top();
               st.pop();
               if(ch1=='('&&ch==')')
               {

               }
               else if(ch1=='{'&&ch=='}')
               {

               }
               else if(ch1=='['&&ch==']')
               {

               }
               else 
               return false;
           }
       }
       if(st.empty())
       return true;
       else
       return false;
        
    }
};


